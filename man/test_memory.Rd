% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test-memory.R
\name{test_memory}
\alias{test_memory}
\title{Test memory leaks with 'valgrind'}
\usage{
test_memory(
  pkg_dir,
  script,
  leak_check = "summary",
  leak_resolution = "med",
  show_leak_kinds = "definite,possible",
  errors_for_leak_kinds = "definite,possible",
  leak_check_heuristics = "all",
  track_origins = "no"
)
}
\arguments{
\item{pkg_dir}{A character string with the name of the package to install.}

\item{script}{A character string with the path to the script to run.}

\item{leak_check}{When enabled, search for memory leaks when the client
program finishes. The options are "no", "summary", "yes", and "full". The
default is "summary".}

\item{leak_resolution}{When doing leak checking, determines how willing
'Memcheck' is to consider different backtraces to be the same for the
purposes of merging multiple leaks into a single leak report. The options
are "low", "med", and "high". The default is "med".}

\item{show_leak_kinds}{Specifies the leak kinds to show in a full leak
search. The options are "definite", "indirect", "possible", "reachable",
and these can be combined with a comma. The default is "definite,possible".}

\item{errors_for_leak_kinds}{Specifies the leak kinds to count as errors in a
full leak search. The options are the same as 'show_leak_kinds'. The default
is "definite,possible".}

\item{leak_check_heuristics}{Specifies the set of leak check heuristics to be
used during leak searches. The options are "all", "stdstring", "length64",
"newarray", "multipleinheritance", and these can be combined with a comma.
The default is "all".}

\item{track_origins}{Controls whether 'Memcheck' tracks the origin of
uninitialised values. The options are "yes" and "no". The default is "no".}
}
\value{
A list with the results of the test.
}
\description{
Installs an R package and runs the tests or a custom script in a
separate R session in vanilla mode.
}
\examples{
# This cannot be run from R CMD check
\dontrun{
dummy_file <- tempfile(fileext = ".R")
writeLines(c("a_plus_b(1, 2)"), dummy_file)
test_memory(".", dummy_file)
}

# see src/code.cpp for the implementation of intentional_leak
# dummy_file <- tempfile(fileext = ".R")
# writeLines(c("intentional_leak(1, 2)"), dummy_file)
# test_memory(".", dummy_file, leak_check = "full")
}
